name: Build & test on own server

on:
  pull_request:
    branches: [ master ]

jobs:
  focal:

    runs-on: ubuntu-20.04

    steps:
    - name: Install local requirements
      run: sudo apt install sshpass
    - name: Install remote requirements (further actions will be executed on runner)
      env:
        TEST_RUNNER_HOST: ${{ secrets.TEST_RUNNER_HOST }}
        TEST_RUNNER_USER: ${{ secrets.TEST_RUNNER_USER }}
        TEST_RUNNER_PASS: ${{ secrets.TEST_RUNNER_PASS }}
      run: sshpass -p "$TEST_RUNNER_PASS" ssh -o StrictHostKeyChecking=no $TEST_RUNNER_USER@$TEST_RUNNER_HOST "sudo apt install libudisks2-dev libxml2-dev python libpam0g-dev devscripts debhelper dh-systemd dkms pkg-config gir1.2-glib-2.0 libglib2.0-dev"
    - name: git fetch --all
      env:
        TEST_RUNNER_HOST: ${{ secrets.TEST_RUNNER_HOST }}
        TEST_RUNNER_USER: ${{ secrets.TEST_RUNNER_USER }}
        TEST_RUNNER_PASS: ${{ secrets.TEST_RUNNER_PASS }}
      run: sshpass -p "$TEST_RUNNER_PASS" ssh -o StrictHostKeyChecking=no $TEST_RUNNER_USER@$TEST_RUNNER_HOST "cd ~/pam_usb && git fetch --all"
    - name: git reset --hard
      env:
        TEST_RUNNER_HOST: ${{ secrets.TEST_RUNNER_HOST }}
        TEST_RUNNER_USER: ${{ secrets.TEST_RUNNER_USER }}
        TEST_RUNNER_PASS: ${{ secrets.TEST_RUNNER_PASS }}
      run: sshpass -p "$TEST_RUNNER_PASS" ssh -o StrictHostKeyChecking=no $TEST_RUNNER_USER@$TEST_RUNNER_HOST "cd ~/pam_usb && git reset --hard"
    - name: git switch -f
      env:
        TEST_RUNNER_HOST: ${{ secrets.TEST_RUNNER_HOST }}
        TEST_RUNNER_USER: ${{ secrets.TEST_RUNNER_USER }}
        TEST_RUNNER_PASS: ${{ secrets.TEST_RUNNER_PASS }}
        REF_TO_CHECKOUT: ${{ github.head_ref }}
      run: sshpass -p "$TEST_RUNNER_PASS" ssh -o StrictHostKeyChecking=no $TEST_RUNNER_USER@$TEST_RUNNER_HOST "cd ~/pam_usb && git switch -f $REF_TO_CHECKOUT"
    - name: git pull
      env:
        TEST_RUNNER_HOST: ${{ secrets.TEST_RUNNER_HOST }}
        TEST_RUNNER_USER: ${{ secrets.TEST_RUNNER_USER }}
        TEST_RUNNER_PASS: ${{ secrets.TEST_RUNNER_PASS }}
      run: sshpass -p "$TEST_RUNNER_PASS" ssh -o StrictHostKeyChecking=no $TEST_RUNNER_USER@$TEST_RUNNER_HOST "cd ~/pam_usb && git pull"
    - name: make deb
      env:
        TEST_RUNNER_HOST: ${{ secrets.TEST_RUNNER_HOST }}
        TEST_RUNNER_USER: ${{ secrets.TEST_RUNNER_USER }}
        TEST_RUNNER_PASS: ${{ secrets.TEST_RUNNER_PASS }}
      run: sshpass -p "$TEST_RUNNER_PASS" ssh -o StrictHostKeyChecking=no $TEST_RUNNER_USER@$TEST_RUNNER_HOST "cd ~/pam_usb && make deb"
    - name: install created .deb package
      run: sudo apt install --reinstall --yes ../libpam-usb*.deb
    # - name: setup g_mass_storage module for fake usb stick
    #   run: cd tests/can-actually-be-used && ./setup-dummyhcd.sh
    # - name: load dummy-hcd module
    #   run: cd tests/can-actually-be-used && ./prepare-mounting.sh
    # - name: create fake usb stick image
    #   run: cd tests/can-actually-be-used && ./create-image.sh
    # - name: insert and mount fake usb stick
    #   run: cd tests/can-actually-be-used && ./mount-image.sh
    # - name: check that installed package can be used
    #   run: cd tests/can-actually-be-used && ./run-tests.sh

