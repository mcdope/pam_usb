name: Package with Docker (on own server)

on:
  pull_request:
    branches: [ master ]

jobs:
  Debian:

    runs-on: ubuntu-22.04

    steps:
    - name: Install local requirements
      run: sudo apt install sshpass
    - name: Install remote requirements (further actions will be executed on runner)
      env:
        TEST_RUNNER_HOST: ${{ secrets.TEST_RUNNER_HOST }}
        TEST_RUNNER_USER: ${{ secrets.TEST_RUNNER_USER }}
        TEST_RUNNER_PASS: ${{ secrets.TEST_RUNNER_PASS }}
      run: sshpass -p "$TEST_RUNNER_PASS" ssh -o StrictHostKeyChecking=no $TEST_RUNNER_USER@$TEST_RUNNER_HOST "sudo apt install libudisks2-dev libxml2-dev python libpam0g-dev devscripts debhelper dh-systemd dkms pkg-config gir1.2-glib-2.0 libglib2.0-dev"
    - name: Set git user
      env:
        TEST_RUNNER_HOST: ${{ secrets.TEST_RUNNER_HOST }}
        TEST_RUNNER_USER: ${{ secrets.TEST_RUNNER_USER }}
        TEST_RUNNER_PASS: ${{ secrets.TEST_RUNNER_PASS }}
      run: sshpass -p "$TEST_RUNNER_PASS" ssh -o StrictHostKeyChecking=no $TEST_RUNNER_USER@$TEST_RUNNER_HOST "cd ~/pam_usb && git config user.name $TEST_RUNNER_USER"
    - name: Set git mail
      env:
        TEST_RUNNER_HOST: ${{ secrets.TEST_RUNNER_HOST }}
        TEST_RUNNER_USER: ${{ secrets.TEST_RUNNER_USER }}
        TEST_RUNNER_PASS: ${{ secrets.TEST_RUNNER_PASS }}
      run: sshpass -p "$TEST_RUNNER_PASS" ssh -o StrictHostKeyChecking=no $TEST_RUNNER_USER@$TEST_RUNNER_HOST "cd ~/pam_usb && git config user.mail $TEST_RUNNER_MAIL"
    - name: git fetch --all
      env:
        TEST_RUNNER_HOST: ${{ secrets.TEST_RUNNER_HOST }}
        TEST_RUNNER_USER: ${{ secrets.TEST_RUNNER_USER }}
        TEST_RUNNER_PASS: ${{ secrets.TEST_RUNNER_PASS }}
      run: sshpass -p "$TEST_RUNNER_PASS" ssh -o StrictHostKeyChecking=no $TEST_RUNNER_USER@$TEST_RUNNER_HOST "cd ~/pam_usb && git fetch --all"
    - name: git reset --hard
      env:
        TEST_RUNNER_HOST: ${{ secrets.TEST_RUNNER_HOST }}
        TEST_RUNNER_USER: ${{ secrets.TEST_RUNNER_USER }}
        TEST_RUNNER_PASS: ${{ secrets.TEST_RUNNER_PASS }}
      run: sshpass -p "$TEST_RUNNER_PASS" ssh -o StrictHostKeyChecking=no $TEST_RUNNER_USER@$TEST_RUNNER_HOST "cd ~/pam_usb && git reset --hard"
    - name: git switch -f
      env:
        TEST_RUNNER_HOST: ${{ secrets.TEST_RUNNER_HOST }}
        TEST_RUNNER_USER: ${{ secrets.TEST_RUNNER_USER }}
        TEST_RUNNER_PASS: ${{ secrets.TEST_RUNNER_PASS }}
        REF_TO_CHECKOUT: ${{ github.head_ref }}
      run: sshpass -p "$TEST_RUNNER_PASS" ssh -o StrictHostKeyChecking=no $TEST_RUNNER_USER@$TEST_RUNNER_HOST "cd ~/pam_usb && git switch -f $REF_TO_CHECKOUT"
    - name: git pull
      env:
        TEST_RUNNER_HOST: ${{ secrets.TEST_RUNNER_HOST }}
        TEST_RUNNER_USER: ${{ secrets.TEST_RUNNER_USER }}
        TEST_RUNNER_PASS: ${{ secrets.TEST_RUNNER_PASS }}
      run: sshpass -p "$TEST_RUNNER_PASS" ssh -o StrictHostKeyChecking=no $TEST_RUNNER_USER@$TEST_RUNNER_HOST "cd ~/pam_usb && git pull"
    - name: remove previously installed package (ensure no config)
      env:
        TEST_RUNNER_HOST: ${{ secrets.TEST_RUNNER_HOST }}
        TEST_RUNNER_USER: ${{ secrets.TEST_RUNNER_USER }}
        TEST_RUNNER_PASS: ${{ secrets.TEST_RUNNER_PASS }}
      run: sshpass -p "$TEST_RUNNER_PASS" ssh -o StrictHostKeyChecking=no $TEST_RUNNER_USER@$TEST_RUNNER_HOST "sudo apt purge --yes libpam-usb || exit 0"
    - name: remove previously built packages
      env:
        TEST_RUNNER_HOST: ${{ secrets.TEST_RUNNER_HOST }}
        TEST_RUNNER_USER: ${{ secrets.TEST_RUNNER_USER }}
        TEST_RUNNER_PASS: ${{ secrets.TEST_RUNNER_PASS }}
      run: sshpass -p "$TEST_RUNNER_PASS" ssh -o StrictHostKeyChecking=no $TEST_RUNNER_USER@$TEST_RUNNER_HOST "cd ~ && rm *.deb"
    - name: Generate Debian build environment
      env:
        TEST_RUNNER_HOST: ${{ secrets.TEST_RUNNER_HOST }}
        TEST_RUNNER_USER: ${{ secrets.TEST_RUNNER_USER }}
        TEST_RUNNER_PASS: ${{ secrets.TEST_RUNNER_PASS }}
      run: sshpass -p "$TEST_RUNNER_PASS" ssh -o StrictHostKeyChecking=no $TEST_RUNNER_USER@$TEST_RUNNER_HOST "cd ~/pam_usb && make buildenv-debian"
    - name: make deb package
      env:
        TEST_RUNNER_HOST: ${{ secrets.TEST_RUNNER_HOST }}
        TEST_RUNNER_USER: ${{ secrets.TEST_RUNNER_USER }}
        TEST_RUNNER_PASS: ${{ secrets.TEST_RUNNER_PASS }}
      run: sshpass -p "$TEST_RUNNER_PASS" ssh -o StrictHostKeyChecking=no $TEST_RUNNER_USER@$TEST_RUNNER_HOST "cd ~/pam_usb && make build-debian"
