name: Nightly packaging (tar.gz, deb, rpm, zst)

on:
  schedule:
    - cron:  '40 * * * *'
    - cron:  '5 0 * * *'

jobs:

  GenerateNightly:

    runs-on: ubuntu-22.04

    steps:
    - name: Install sshpass on Github runner
      run: sudo apt install sshpass
    - name: FURTHER STEPS EXECUTED ON CONFIGURED RUNNER
      run: exit 0
    - name: git clone
      env:
        TEST_RUNNER_HOST: ${{ secrets.TEST_RUNNER_HOST }}
        TEST_RUNNER_USER: ${{ secrets.TEST_RUNNER_USER }}
        TEST_RUNNER_PASS: ${{ secrets.TEST_RUNNER_PASS }}
      run: sshpass -p "$TEST_RUNNER_PASS" ssh -o StrictHostKeyChecking=no $TEST_RUNNER_USER@$TEST_RUNNER_HOST "rm -rf ~/pam_usb_nightly_$GITHUB_RUN_ID && git clone https://github.com/mcdope/pam_usb.git pam_usb_nightly_$GITHUB_RUN_ID"
    - name: git fetch --all
      env:
        TEST_RUNNER_HOST: ${{ secrets.TEST_RUNNER_HOST }}
        TEST_RUNNER_USER: ${{ secrets.TEST_RUNNER_USER }}
        TEST_RUNNER_PASS: ${{ secrets.TEST_RUNNER_PASS }}
      run: sshpass -p "$TEST_RUNNER_PASS" ssh -o StrictHostKeyChecking=no $TEST_RUNNER_USER@$TEST_RUNNER_HOST "cd ~/pam_usb_nightly_$GITHUB_RUN_ID && git fetch --all"
    - name: git reset --hard
      env:
        TEST_RUNNER_HOST: ${{ secrets.TEST_RUNNER_HOST }}
        TEST_RUNNER_USER: ${{ secrets.TEST_RUNNER_USER }}
        TEST_RUNNER_PASS: ${{ secrets.TEST_RUNNER_PASS }}
      run: sshpass -p "$TEST_RUNNER_PASS" ssh -o StrictHostKeyChecking=no $TEST_RUNNER_USER@$TEST_RUNNER_HOST "cd ~/pam_usb_nightly_$GITHUB_RUN_ID && git reset --hard"
    - name: git switch -f
      env:
        TEST_RUNNER_HOST: ${{ secrets.TEST_RUNNER_HOST }}
        TEST_RUNNER_USER: ${{ secrets.TEST_RUNNER_USER }}
        TEST_RUNNER_PASS: ${{ secrets.TEST_RUNNER_PASS }}
        REF_TO_CHECKOUT: ${{ github.head_ref }}
      run: sshpass -p "$TEST_RUNNER_PASS" ssh -o StrictHostKeyChecking=no $TEST_RUNNER_USER@$TEST_RUNNER_HOST "cd ~/pam_usb_nightly_$GITHUB_RUN_ID && git switch -f $REF_TO_CHECKOUT || git switch -f master"
    - name: git pull
      env:
        TEST_RUNNER_HOST: ${{ secrets.TEST_RUNNER_HOST }}
        TEST_RUNNER_USER: ${{ secrets.TEST_RUNNER_USER }}
        TEST_RUNNER_PASS: ${{ secrets.TEST_RUNNER_PASS }}
      run: sshpass -p "$TEST_RUNNER_PASS" ssh -o StrictHostKeyChecking=no $TEST_RUNNER_USER@$TEST_RUNNER_HOST "cd ~/pam_usb_nightly_$GITHUB_RUN_ID && git pull"
    - name: Build .tar.gz source package
      env:
        TEST_RUNNER_HOST: ${{ secrets.TEST_RUNNER_HOST }}
        TEST_RUNNER_USER: ${{ secrets.TEST_RUNNER_USER }}
        TEST_RUNNER_PASS: ${{ secrets.TEST_RUNNER_PASS }}
      run: sshpass -p "$TEST_RUNNER_PASS" ssh -o StrictHostKeyChecking=no $TEST_RUNNER_USER@$TEST_RUNNER_HOST "cd ~/pam_usb_nightly_$GITHUB_RUN_ID && make sourcegz"
    - name: Generate Debian build environment
      env:
        TEST_RUNNER_HOST: ${{ secrets.TEST_RUNNER_HOST }}
        TEST_RUNNER_USER: ${{ secrets.TEST_RUNNER_USER }}
        TEST_RUNNER_PASS: ${{ secrets.TEST_RUNNER_PASS }}
      run: sshpass -p "$TEST_RUNNER_PASS" ssh -o StrictHostKeyChecking=no $TEST_RUNNER_USER@$TEST_RUNNER_HOST "cd ~/pam_usb_nightly_$GITHUB_RUN_ID && make buildenv-debian"
    - name: Build .deb package
      env:
        TEST_RUNNER_HOST: ${{ secrets.TEST_RUNNER_HOST }}
        TEST_RUNNER_USER: ${{ secrets.TEST_RUNNER_USER }}
        TEST_RUNNER_PASS: ${{ secrets.TEST_RUNNER_PASS }}
      run: sshpass -p "$TEST_RUNNER_PASS" ssh -o StrictHostKeyChecking=no $TEST_RUNNER_USER@$TEST_RUNNER_HOST "cd ~/pam_usb_nightly_$GITHUB_RUN_ID && make build-debian"
    - name: Generate Fedora build environment
      env:
        TEST_RUNNER_HOST: ${{ secrets.TEST_RUNNER_HOST }}
        TEST_RUNNER_USER: ${{ secrets.TEST_RUNNER_USER }}
        TEST_RUNNER_PASS: ${{ secrets.TEST_RUNNER_PASS }}
      run: sshpass -p "$TEST_RUNNER_PASS" ssh -o StrictHostKeyChecking=no $TEST_RUNNER_USER@$TEST_RUNNER_HOST "cd ~/pam_usb_nightly_$GITHUB_RUN_ID && make buildenv-fedora"
    - name: Build .rpm package
      env:
        TEST_RUNNER_HOST: ${{ secrets.TEST_RUNNER_HOST }}
        TEST_RUNNER_USER: ${{ secrets.TEST_RUNNER_USER }}
        TEST_RUNNER_PASS: ${{ secrets.TEST_RUNNER_PASS }}
      run: sshpass -p "$TEST_RUNNER_PASS" ssh -o StrictHostKeyChecking=no $TEST_RUNNER_USER@$TEST_RUNNER_HOST "cd ~/pam_usb_nightly_$GITHUB_RUN_ID && make build-fedora"
    - name: Generate Arch build environment
      env:
        TEST_RUNNER_HOST: ${{ secrets.TEST_RUNNER_HOST }}
        TEST_RUNNER_USER: ${{ secrets.TEST_RUNNER_USER }}
        TEST_RUNNER_PASS: ${{ secrets.TEST_RUNNER_PASS }}
      run: sshpass -p "$TEST_RUNNER_PASS" ssh -o StrictHostKeyChecking=no $TEST_RUNNER_USER@$TEST_RUNNER_HOST "cd ~/pam_usb_nightly_$GITHUB_RUN_ID && make buildenv-arch"
    - name: Build .zst package
      env:
        TEST_RUNNER_HOST: ${{ secrets.TEST_RUNNER_HOST }}
        TEST_RUNNER_USER: ${{ secrets.TEST_RUNNER_USER }}
        TEST_RUNNER_PASS: ${{ secrets.TEST_RUNNER_PASS }}
      run: sshpass -p "$TEST_RUNNER_PASS" ssh -o StrictHostKeyChecking=no $TEST_RUNNER_USER@$TEST_RUNNER_HOST "cd ~/pam_usb_nightly_$GITHUB_RUN_ID && make build-arch"
    - name: Download generated package files
      env:
        TEST_RUNNER_HOST: ${{ secrets.TEST_RUNNER_HOST }}
        TEST_RUNNER_USER: ${{ secrets.TEST_RUNNER_USER }}
        TEST_RUNNER_PASS: ${{ secrets.TEST_RUNNER_PASS }}
      run: sshpass -p "$TEST_RUNNER_PASS" scp -r ${{ secrets.TEST_RUNNER_USER }}@${{ secrets.TEST_RUNNER_HOST }}:/home/${{ secrets.TEST_RUNNER_USER }}/pam_usb_nightly_$GITHUB_RUN_ID/.build .
    - name: Rename generated package files
      run: mv .build/*.zst .build/pam_usb-nightly-`date +%Y%m%d`-x86_64.pkg.tar.zst && mv .build/*.deb .build/pam_usb-nightly-`date +%Y%m%d`_amd64.deb && mv .build/*.rpm .build/pam_usb-nightly-`date +%Y%m%d`.x86_64.rpm
    - name: Upload nightly packages
      uses: pyTooling/Actions/releaser@r0
      with:
        rm: true
        tag: nightly
        token: ${{ secrets.GITHUB_TOKEN }}
        files: |
          ./.build/*.gz
          ./.build/*.deb
          ./.build/*.rpm
          ./.build/*.zst
    - name: Cleanup
      env:
        TEST_RUNNER_HOST: ${{ secrets.TEST_RUNNER_HOST }}
        TEST_RUNNER_USER: ${{ secrets.TEST_RUNNER_USER }}
        TEST_RUNNER_PASS: ${{ secrets.TEST_RUNNER_PASS }}
      run: sshpass -p "$TEST_RUNNER_PASS" ssh -o StrictHostKeyChecking=no $TEST_RUNNER_USER@$TEST_RUNNER_HOST "rm -rf ~/pam_usb_nightly_$GITHUB_RUN_ID"

